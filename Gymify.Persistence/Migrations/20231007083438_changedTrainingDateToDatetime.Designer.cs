// <auto-generated />
using System;
using Gymify.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Gymify.Persistence.Migrations
{
    [DbContext(typeof(GymifyDbContext))]
    [Migration("20231007083438_changedTrainingDateToDatetime")]
    partial class changedTrainingDateToDatetime
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Gymify.Domain.Entities.AspNetRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AspNetRole");
                });

            modelBuilder.Entity("Gymify.Domain.Entities.AspNetRoleClaim", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaim");
                });

            modelBuilder.Entity("Gymify.Domain.Entities.AspNetUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("AspNetRoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte[]>("Avatar")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("date");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("RefreshTokenExpiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("AspNetRoleId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Gymify.Domain.Entities.BodyPart", b =>
                {
                    b.Property<int>("BodyPartId")
                        .HasColumnType("int");

                    b.Property<string>("BodyPartName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)");

                    b.HasKey("BodyPartId")
                        .HasName("BodyPart_pk");

                    b.ToTable("BodyPart", (string)null);

                    b.HasData(
                        new
                        {
                            BodyPartId = 0,
                            BodyPartName = "Waist"
                        },
                        new
                        {
                            BodyPartId = 1,
                            BodyPartName = "Upper legs"
                        },
                        new
                        {
                            BodyPartId = 2,
                            BodyPartName = "Back"
                        },
                        new
                        {
                            BodyPartId = 3,
                            BodyPartName = "Lower legs"
                        },
                        new
                        {
                            BodyPartId = 4,
                            BodyPartName = "Chest"
                        },
                        new
                        {
                            BodyPartId = 5,
                            BodyPartName = "Upper arms"
                        },
                        new
                        {
                            BodyPartId = 6,
                            BodyPartName = "Cardio"
                        },
                        new
                        {
                            BodyPartId = 7,
                            BodyPartName = "Shoulders"
                        },
                        new
                        {
                            BodyPartId = 8,
                            BodyPartName = "Lower arms"
                        },
                        new
                        {
                            BodyPartId = 9,
                            BodyPartName = "Neck"
                        });
                });

            modelBuilder.Entity("Gymify.Domain.Entities.Client", b =>
                {
                    b.Property<Guid>("ClientUid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ClientUid")
                        .HasName("Client_pk");

                    b.ToTable("Client", (string)null);
                });

            modelBuilder.Entity("Gymify.Domain.Entities.ClientGroupSession", b =>
                {
                    b.Property<Guid>("ClientGroupSessionUid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GroupSessionUid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClientUid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ClientGroupSessionUid", "GroupSessionUid", "ClientUid")
                        .HasName("ClientGroupSession_pk");

                    b.HasIndex("ClientUid");

                    b.HasIndex("GroupSessionUid");

                    b.ToTable("ClientGroupSession", (string)null);
                });

            modelBuilder.Entity("Gymify.Domain.Entities.Coach", b =>
                {
                    b.Property<Guid>("CoachUid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)");

                    b.HasKey("CoachUid")
                        .HasName("Coach_pk");

                    b.ToTable("Coach", (string)null);
                });

            modelBuilder.Entity("Gymify.Domain.Entities.CoachCategory", b =>
                {
                    b.Property<int>("CoachCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("CoachCategoryName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)");

                    b.HasKey("CoachCategoryId")
                        .HasName("CoachCategory_pk");

                    b.ToTable("CoachCategory", (string)null);

                    b.HasData(
                        new
                        {
                            CoachCategoryId = 0,
                            CoachCategoryName = "Fitness"
                        },
                        new
                        {
                            CoachCategoryId = 1,
                            CoachCategoryName = "Group fitness instructor"
                        },
                        new
                        {
                            CoachCategoryId = 2,
                            CoachCategoryName = "Cross fit trainer"
                        },
                        new
                        {
                            CoachCategoryId = 3,
                            CoachCategoryName = "Rehabilitation"
                        },
                        new
                        {
                            CoachCategoryId = 4,
                            CoachCategoryName = "Core Strengthening"
                        },
                        new
                        {
                            CoachCategoryId = 5,
                            CoachCategoryName = "Bodybuilding"
                        },
                        new
                        {
                            CoachCategoryId = 6,
                            CoachCategoryName = "Weight loss"
                        },
                        new
                        {
                            CoachCategoryId = 7,
                            CoachCategoryName = "Cardiovascular"
                        });
                });

            modelBuilder.Entity("Gymify.Domain.Entities.CoachHour", b =>
                {
                    b.Property<Guid>("CoachHourUid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ClientUid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CoachUid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.HasKey("CoachHourUid")
                        .HasName("CoachHour_pk");

                    b.HasIndex("ClientUid");

                    b.HasIndex("CoachUid");

                    b.ToTable("CoachHour", (string)null);
                });

            modelBuilder.Entity("Gymify.Domain.Entities.CoachType", b =>
                {
                    b.Property<Guid>("CoachTypeUid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CoachUid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CoachCategoryId")
                        .HasColumnType("int");

                    b.HasKey("CoachTypeUid", "CoachUid", "CoachCategoryId")
                        .HasName("CoachType_pk");

                    b.HasIndex("CoachCategoryId");

                    b.HasIndex("CoachUid");

                    b.ToTable("CoachType", (string)null);
                });

            modelBuilder.Entity("Gymify.Domain.Entities.DifficultyLevel", b =>
                {
                    b.Property<int>("DifficultyLevelId")
                        .HasColumnType("int");

                    b.Property<string>("DifficultyLevelName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)");

                    b.HasKey("DifficultyLevelId")
                        .HasName("DifficultyLevel_pk");

                    b.ToTable("DifficultyLevel", (string)null);

                    b.HasData(
                        new
                        {
                            DifficultyLevelId = 0,
                            DifficultyLevelName = "Easy"
                        },
                        new
                        {
                            DifficultyLevelId = 1,
                            DifficultyLevelName = "Medium"
                        },
                        new
                        {
                            DifficultyLevelId = 2,
                            DifficultyLevelName = "Hard"
                        });
                });

            modelBuilder.Entity("Gymify.Domain.Entities.Equipment", b =>
                {
                    b.Property<int>("EquipmentId")
                        .HasColumnType("int");

                    b.Property<string>("EquipmentName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)");

                    b.HasKey("EquipmentId")
                        .HasName("Equipment_pk");

                    b.ToTable("Equipment");

                    b.HasData(
                        new
                        {
                            EquipmentId = 0,
                            EquipmentName = "Body weight"
                        },
                        new
                        {
                            EquipmentId = 1,
                            EquipmentName = "Cable"
                        },
                        new
                        {
                            EquipmentId = 2,
                            EquipmentName = "Leverage machine"
                        },
                        new
                        {
                            EquipmentId = 3,
                            EquipmentName = "Assisted"
                        },
                        new
                        {
                            EquipmentId = 4,
                            EquipmentName = "Medicine ball"
                        },
                        new
                        {
                            EquipmentId = 5,
                            EquipmentName = "Stability ball"
                        },
                        new
                        {
                            EquipmentId = 6,
                            EquipmentName = "Band"
                        },
                        new
                        {
                            EquipmentId = 7,
                            EquipmentName = "Barbell"
                        },
                        new
                        {
                            EquipmentId = 8,
                            EquipmentName = "Rope"
                        },
                        new
                        {
                            EquipmentId = 9,
                            EquipmentName = "Dumbell"
                        },
                        new
                        {
                            EquipmentId = 10,
                            EquipmentName = "Ez barbell"
                        },
                        new
                        {
                            EquipmentId = 11,
                            EquipmentName = "Sled machine"
                        },
                        new
                        {
                            EquipmentId = 12,
                            EquipmentName = "Upper body ergometer"
                        },
                        new
                        {
                            EquipmentId = 13,
                            EquipmentName = "Kettlebell"
                        },
                        new
                        {
                            EquipmentId = 14,
                            EquipmentName = "Olympic barbell"
                        },
                        new
                        {
                            EquipmentId = 15,
                            EquipmentName = "Weighted"
                        },
                        new
                        {
                            EquipmentId = 16,
                            EquipmentName = "Bosu ball"
                        },
                        new
                        {
                            EquipmentId = 17,
                            EquipmentName = "Resistance band"
                        },
                        new
                        {
                            EquipmentId = 18,
                            EquipmentName = "Roller"
                        },
                        new
                        {
                            EquipmentId = 19,
                            EquipmentName = "Skierg machine"
                        },
                        new
                        {
                            EquipmentId = 20,
                            EquipmentName = "Hammer"
                        },
                        new
                        {
                            EquipmentId = 21,
                            EquipmentName = "Smith machine"
                        },
                        new
                        {
                            EquipmentId = 22,
                            EquipmentName = "Wheel roller"
                        },
                        new
                        {
                            EquipmentId = 23,
                            EquipmentName = "Stationary bike"
                        },
                        new
                        {
                            EquipmentId = 24,
                            EquipmentName = "Tire"
                        },
                        new
                        {
                            EquipmentId = 25,
                            EquipmentName = "Trap bar"
                        },
                        new
                        {
                            EquipmentId = 26,
                            EquipmentName = "Elliptical machine"
                        },
                        new
                        {
                            EquipmentId = 27,
                            EquipmentName = "Stepmill machine"
                        });
                });

            modelBuilder.Entity("Gymify.Domain.Entities.Exercise", b =>
                {
                    b.Property<Guid>("ExerciseUid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BodyPartId")
                        .HasColumnType("int");

                    b.Property<int>("EquipmentId")
                        .HasColumnType("int");

                    b.Property<byte[]>("ExerciseGif")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ExerciseName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<int>("TargetId")
                        .HasColumnType("int");

                    b.HasKey("ExerciseUid")
                        .HasName("Exercise_pk");

                    b.HasIndex("BodyPartId");

                    b.HasIndex("EquipmentId");

                    b.HasIndex("TargetId");

                    b.ToTable("Exercise", (string)null);
                });

            modelBuilder.Entity("Gymify.Domain.Entities.FavouriteCoach", b =>
                {
                    b.Property<Guid>("FavouriteCoachUid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClientUid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CoachUid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FavouriteCoachUid", "ClientUid", "CoachUid")
                        .HasName("FavouriteCoach_pk");

                    b.HasIndex("ClientUid");

                    b.HasIndex("CoachUid");

                    b.ToTable("FavouriteCoach", (string)null);
                });

            modelBuilder.Entity("Gymify.Domain.Entities.FavouriteExercise", b =>
                {
                    b.Property<Guid>("FavouriteExerciseUid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserUid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ExerciseUid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FavouriteExerciseUid", "UserUid", "ExerciseUid")
                        .HasName("FavouriteExercise_pk");

                    b.HasIndex("ExerciseUid");

                    b.HasIndex("UserUid");

                    b.ToTable("FavouriteExercise", (string)null);
                });

            modelBuilder.Entity("Gymify.Domain.Entities.GroupSession", b =>
                {
                    b.Property<Guid>("GroupSessionUid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CoachUid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)");

                    b.Property<int>("PlaceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SessionEndDate")
                        .HasColumnType("datetime");

                    b.Property<string>("SessionName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime>("SessionStartDate")
                        .HasColumnType("datetime");

                    b.Property<int>("Slots")
                        .HasColumnType("int");

                    b.HasKey("GroupSessionUid")
                        .HasName("GroupSession_pk");

                    b.HasIndex("CoachUid");

                    b.HasIndex("PlaceId");

                    b.ToTable("GroupSession", (string)null);
                });

            modelBuilder.Entity("Gymify.Domain.Entities.Place", b =>
                {
                    b.Property<int>("PlaceId")
                        .HasColumnType("int");

                    b.Property<string>("PlaceName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("PlaceName");

                    b.HasKey("PlaceId")
                        .HasName("Place_pk");

                    b.ToTable("Place", (string)null);

                    b.HasData(
                        new
                        {
                            PlaceId = 0,
                            PlaceName = "Cardio area"
                        },
                        new
                        {
                            PlaceId = 1,
                            PlaceName = "Weightlifting zone"
                        },
                        new
                        {
                            PlaceId = 2,
                            PlaceName = "Free weights zone"
                        },
                        new
                        {
                            PlaceId = 3,
                            PlaceName = "Weightlifting section"
                        },
                        new
                        {
                            PlaceId = 4,
                            PlaceName = "Stretching zone"
                        },
                        new
                        {
                            PlaceId = 5,
                            PlaceName = "Group fitness studio"
                        },
                        new
                        {
                            PlaceId = 6,
                            PlaceName = "Martial arts area"
                        },
                        new
                        {
                            PlaceId = 7,
                            PlaceName = "Locker room"
                        },
                        new
                        {
                            PlaceId = 8,
                            PlaceName = "Sauna"
                        },
                        new
                        {
                            PlaceId = 9,
                            PlaceName = "Massage and recovery center"
                        });
                });

            modelBuilder.Entity("Gymify.Domain.Entities.Target", b =>
                {
                    b.Property<int>("TargetId")
                        .HasColumnType("int");

                    b.Property<string>("TargetName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)");

                    b.HasKey("TargetId")
                        .HasName("Target_pk");

                    b.ToTable("Target", (string)null);

                    b.HasData(
                        new
                        {
                            TargetId = 0,
                            TargetName = "Abs"
                        },
                        new
                        {
                            TargetId = 1,
                            TargetName = "Quads"
                        },
                        new
                        {
                            TargetId = 2,
                            TargetName = "Lats"
                        },
                        new
                        {
                            TargetId = 3,
                            TargetName = "Calves"
                        },
                        new
                        {
                            TargetId = 4,
                            TargetName = "Pectorals"
                        },
                        new
                        {
                            TargetId = 5,
                            TargetName = "Glutes"
                        },
                        new
                        {
                            TargetId = 6,
                            TargetName = "Hamstrings"
                        },
                        new
                        {
                            TargetId = 7,
                            TargetName = "Adductors"
                        },
                        new
                        {
                            TargetId = 8,
                            TargetName = "Triceps"
                        },
                        new
                        {
                            TargetId = 9,
                            TargetName = "Cardiovascular system"
                        },
                        new
                        {
                            TargetId = 10,
                            TargetName = "Spine"
                        },
                        new
                        {
                            TargetId = 11,
                            TargetName = "Upper back"
                        },
                        new
                        {
                            TargetId = 12,
                            TargetName = "Biceps"
                        },
                        new
                        {
                            TargetId = 13,
                            TargetName = "Delts"
                        },
                        new
                        {
                            TargetId = 14,
                            TargetName = "Forearms"
                        },
                        new
                        {
                            TargetId = 15,
                            TargetName = "Traps"
                        },
                        new
                        {
                            TargetId = 16,
                            TargetName = "Serratus anterior"
                        },
                        new
                        {
                            TargetId = 17,
                            TargetName = "Abductors"
                        },
                        new
                        {
                            TargetId = 18,
                            TargetName = "Levator scapulae"
                        });
                });

            modelBuilder.Entity("Gymify.Domain.Entities.Template", b =>
                {
                    b.Property<Guid>("TemplateUid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DifficultyLevelId")
                        .HasColumnType("int");

                    b.Property<decimal>("EstimatedTime")
                        .HasColumnType("numeric(3, 0)");

                    b.Property<bool>("IsShared")
                        .HasColumnType("bit");

                    b.Property<string>("TemplateName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)");

                    b.Property<Guid>("UserUid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TemplateUid")
                        .HasName("Template_pk");

                    b.HasIndex("DifficultyLevelId");

                    b.HasIndex("UserUid");

                    b.ToTable("Template", (string)null);
                });

            modelBuilder.Entity("Gymify.Domain.Entities.TemplateExercise", b =>
                {
                    b.Property<Guid>("TemplateExerciseUid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ExerciseUid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TemplateUid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comments")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)");

                    b.Property<int>("NumberOfReps")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfSets")
                        .HasColumnType("int");

                    b.HasKey("TemplateExerciseUid", "ExerciseUid", "TemplateUid")
                        .HasName("TemplateExercise_pk");

                    b.HasIndex("ExerciseUid");

                    b.HasIndex("TemplateUid");

                    b.ToTable("TemplateExercise", (string)null);
                });

            modelBuilder.Entity("Gymify.Domain.Entities.Training", b =>
                {
                    b.Property<Guid>("TrainingUid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsCyclical")
                        .HasColumnType("bit");

                    b.Property<Guid>("TemplateUid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("TrainingDate")
                        .HasColumnType("datetime");

                    b.Property<string>("TrainingName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)");

                    b.HasKey("TrainingUid")
                        .HasName("Training_pk");

                    b.HasIndex("TemplateUid");

                    b.ToTable("Training");
                });

            modelBuilder.Entity("Gymify.Domain.Entities.UserTraining", b =>
                {
                    b.Property<Guid>("UserTrainingUid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserUid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TrainingUid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserTrainingUid", "UserUid", "TrainingUid")
                        .HasName("UserTraining_pk");

                    b.HasIndex("TrainingUid");

                    b.HasIndex("UserUid");

                    b.ToTable("UserTraining", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Gymify.Domain.Entities.AspNetRoleClaim", b =>
                {
                    b.HasOne("Gymify.Domain.Entities.AspNetRole", "Role")
                        .WithMany("AspNetRoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Gymify.Domain.Entities.AspNetUser", b =>
                {
                    b.HasOne("Gymify.Domain.Entities.AspNetRole", null)
                        .WithMany("Users")
                        .HasForeignKey("AspNetRoleId");
                });

            modelBuilder.Entity("Gymify.Domain.Entities.Client", b =>
                {
                    b.HasOne("Gymify.Domain.Entities.AspNetUser", "User")
                        .WithOne("Client")
                        .HasForeignKey("Gymify.Domain.Entities.Client", "ClientUid")
                        .IsRequired()
                        .HasConstraintName("Client_AspNetUsers");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Gymify.Domain.Entities.ClientGroupSession", b =>
                {
                    b.HasOne("Gymify.Domain.Entities.Client", "Client")
                        .WithMany("ClientGroupSessions")
                        .HasForeignKey("ClientUid")
                        .IsRequired()
                        .HasConstraintName("ClientGroupSession_Client");

                    b.HasOne("Gymify.Domain.Entities.GroupSession", "GroupSession")
                        .WithMany("ClientGroupSessions")
                        .HasForeignKey("GroupSessionUid")
                        .IsRequired()
                        .HasConstraintName("ClientGroupSession_GroupSession");

                    b.Navigation("Client");

                    b.Navigation("GroupSession");
                });

            modelBuilder.Entity("Gymify.Domain.Entities.Coach", b =>
                {
                    b.HasOne("Gymify.Domain.Entities.AspNetUser", "User")
                        .WithOne("Coach")
                        .HasForeignKey("Gymify.Domain.Entities.Coach", "CoachUid")
                        .IsRequired()
                        .HasConstraintName("Coach_AspNetUsers");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Gymify.Domain.Entities.CoachHour", b =>
                {
                    b.HasOne("Gymify.Domain.Entities.Client", "Client")
                        .WithMany("CoachHours")
                        .HasForeignKey("ClientUid")
                        .HasConstraintName("CoachHour_Client");

                    b.HasOne("Gymify.Domain.Entities.Coach", "Coach")
                        .WithMany("CoachHours")
                        .HasForeignKey("CoachUid")
                        .IsRequired()
                        .HasConstraintName("CoachHour_Coach");

                    b.Navigation("Client");

                    b.Navigation("Coach");
                });

            modelBuilder.Entity("Gymify.Domain.Entities.CoachType", b =>
                {
                    b.HasOne("Gymify.Domain.Entities.CoachCategory", "CoachCategory")
                        .WithMany("CoachTypes")
                        .HasForeignKey("CoachCategoryId")
                        .IsRequired()
                        .HasConstraintName("CoachType_CoachCategory");

                    b.HasOne("Gymify.Domain.Entities.Coach", "Coach")
                        .WithMany("CoachTypes")
                        .HasForeignKey("CoachUid")
                        .IsRequired()
                        .HasConstraintName("CoachType_Coach");

                    b.Navigation("Coach");

                    b.Navigation("CoachCategory");
                });

            modelBuilder.Entity("Gymify.Domain.Entities.Exercise", b =>
                {
                    b.HasOne("Gymify.Domain.Entities.BodyPart", "BodyPart")
                        .WithMany("Exercises")
                        .HasForeignKey("BodyPartId")
                        .IsRequired()
                        .HasConstraintName("Exercise_BodyPart");

                    b.HasOne("Gymify.Domain.Entities.Equipment", "Equipment")
                        .WithMany("Exercises")
                        .HasForeignKey("EquipmentId")
                        .IsRequired()
                        .HasConstraintName("Exercise_Equipment");

                    b.HasOne("Gymify.Domain.Entities.Target", "Target")
                        .WithMany("Exercises")
                        .HasForeignKey("TargetId")
                        .IsRequired()
                        .HasConstraintName("Exercise_Target");

                    b.Navigation("BodyPart");

                    b.Navigation("Equipment");

                    b.Navigation("Target");
                });

            modelBuilder.Entity("Gymify.Domain.Entities.FavouriteCoach", b =>
                {
                    b.HasOne("Gymify.Domain.Entities.Client", "Client")
                        .WithMany("FavouriteCoaches")
                        .HasForeignKey("ClientUid")
                        .IsRequired()
                        .HasConstraintName("FavouriteCoach_Client");

                    b.HasOne("Gymify.Domain.Entities.Coach", "Coach")
                        .WithMany("FavouriteCoaches")
                        .HasForeignKey("CoachUid")
                        .IsRequired()
                        .HasConstraintName("FavouriteCoach_Coach");

                    b.Navigation("Client");

                    b.Navigation("Coach");
                });

            modelBuilder.Entity("Gymify.Domain.Entities.FavouriteExercise", b =>
                {
                    b.HasOne("Gymify.Domain.Entities.Exercise", "Exercise")
                        .WithMany("FavouriteExercises")
                        .HasForeignKey("ExerciseUid")
                        .IsRequired()
                        .HasConstraintName("UserExercise_Exercise");

                    b.HasOne("Gymify.Domain.Entities.AspNetUser", "User")
                        .WithMany("FavouriteExercises")
                        .HasForeignKey("UserUid")
                        .IsRequired()
                        .HasConstraintName("FavouriteExercise_AspNetUsers");

                    b.Navigation("Exercise");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Gymify.Domain.Entities.GroupSession", b =>
                {
                    b.HasOne("Gymify.Domain.Entities.Coach", "Coach")
                        .WithMany("GroupSessions")
                        .HasForeignKey("CoachUid")
                        .IsRequired()
                        .HasConstraintName("GroupSession_Coach");

                    b.HasOne("Gymify.Domain.Entities.Place", "Place")
                        .WithMany("GroupSessions")
                        .HasForeignKey("PlaceId")
                        .IsRequired()
                        .HasConstraintName("GroupSession_Place");

                    b.Navigation("Coach");

                    b.Navigation("Place");
                });

            modelBuilder.Entity("Gymify.Domain.Entities.Template", b =>
                {
                    b.HasOne("Gymify.Domain.Entities.DifficultyLevel", "DifficultyLevel")
                        .WithMany("Templates")
                        .HasForeignKey("DifficultyLevelId")
                        .IsRequired()
                        .HasConstraintName("Template_DifficultyLevel");

                    b.HasOne("Gymify.Domain.Entities.AspNetUser", "User")
                        .WithMany("Templates")
                        .HasForeignKey("UserUid")
                        .IsRequired()
                        .HasConstraintName("Template_User");

                    b.Navigation("DifficultyLevel");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Gymify.Domain.Entities.TemplateExercise", b =>
                {
                    b.HasOne("Gymify.Domain.Entities.Exercise", "Exercise")
                        .WithMany("TemplateExercises")
                        .HasForeignKey("ExerciseUid")
                        .IsRequired()
                        .HasConstraintName("TemplateExercise_Exercise");

                    b.HasOne("Gymify.Domain.Entities.Template", "Template")
                        .WithMany("TemplateExercises")
                        .HasForeignKey("TemplateUid")
                        .IsRequired()
                        .HasConstraintName("TemplateExercise_Template");

                    b.Navigation("Exercise");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("Gymify.Domain.Entities.Training", b =>
                {
                    b.HasOne("Gymify.Domain.Entities.Template", "Template")
                        .WithMany("Training")
                        .HasForeignKey("TemplateUid")
                        .IsRequired()
                        .HasConstraintName("Training_Template");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("Gymify.Domain.Entities.UserTraining", b =>
                {
                    b.HasOne("Gymify.Domain.Entities.Training", "Training")
                        .WithMany("UserTrainings")
                        .HasForeignKey("TrainingUid")
                        .IsRequired()
                        .HasConstraintName("UserTraining_Training");

                    b.HasOne("Gymify.Domain.Entities.AspNetUser", "User")
                        .WithMany("UserTrainings")
                        .HasForeignKey("UserUid")
                        .IsRequired()
                        .HasConstraintName("UserTraining_AspNetUsers");

                    b.Navigation("Training");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Gymify.Domain.Entities.AspNetUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Gymify.Domain.Entities.AspNetUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gymify.Domain.Entities.AspNetUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Gymify.Domain.Entities.AspNetUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Gymify.Domain.Entities.AspNetRole", b =>
                {
                    b.Navigation("AspNetRoleClaims");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Gymify.Domain.Entities.AspNetUser", b =>
                {
                    b.Navigation("Client");

                    b.Navigation("Coach");

                    b.Navigation("FavouriteExercises");

                    b.Navigation("Templates");

                    b.Navigation("UserTrainings");
                });

            modelBuilder.Entity("Gymify.Domain.Entities.BodyPart", b =>
                {
                    b.Navigation("Exercises");
                });

            modelBuilder.Entity("Gymify.Domain.Entities.Client", b =>
                {
                    b.Navigation("ClientGroupSessions");

                    b.Navigation("CoachHours");

                    b.Navigation("FavouriteCoaches");
                });

            modelBuilder.Entity("Gymify.Domain.Entities.Coach", b =>
                {
                    b.Navigation("CoachHours");

                    b.Navigation("CoachTypes");

                    b.Navigation("FavouriteCoaches");

                    b.Navigation("GroupSessions");
                });

            modelBuilder.Entity("Gymify.Domain.Entities.CoachCategory", b =>
                {
                    b.Navigation("CoachTypes");
                });

            modelBuilder.Entity("Gymify.Domain.Entities.DifficultyLevel", b =>
                {
                    b.Navigation("Templates");
                });

            modelBuilder.Entity("Gymify.Domain.Entities.Equipment", b =>
                {
                    b.Navigation("Exercises");
                });

            modelBuilder.Entity("Gymify.Domain.Entities.Exercise", b =>
                {
                    b.Navigation("FavouriteExercises");

                    b.Navigation("TemplateExercises");
                });

            modelBuilder.Entity("Gymify.Domain.Entities.GroupSession", b =>
                {
                    b.Navigation("ClientGroupSessions");
                });

            modelBuilder.Entity("Gymify.Domain.Entities.Place", b =>
                {
                    b.Navigation("GroupSessions");
                });

            modelBuilder.Entity("Gymify.Domain.Entities.Target", b =>
                {
                    b.Navigation("Exercises");
                });

            modelBuilder.Entity("Gymify.Domain.Entities.Template", b =>
                {
                    b.Navigation("TemplateExercises");

                    b.Navigation("Training");
                });

            modelBuilder.Entity("Gymify.Domain.Entities.Training", b =>
                {
                    b.Navigation("UserTrainings");
                });
#pragma warning restore 612, 618
        }
    }
}
